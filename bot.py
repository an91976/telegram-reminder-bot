from telegram.ext import Application, CommandHandler, ContextTypes, ConversationHandler, MessageHandler, filters
from telegram import Update, ReplyKeyboardMarkup, ReplyKeyboardRemove
from datetime import time, datetime
import json
import os
import pytz

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è —Ä–∞–∑–≥–æ–≤–æ—Ä–∞
CHOOSING_ACTION = 0
ADDING_REMINDER = 1
REMOVING_REMINDER = 2
SETTING_TIME = 3

# –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π
DEFAULT_REMINDERS = {
    "teeth_morning": {
        "text": "–î–∞–Ω—è, —Ç—ã –ø–æ—á–∏—Å—Ç–∏–ª –∑—É–±—ã? ü¶∑",
        "time": "06:00",
        "days": "weekdays",
        "enabled": True
    },
    "teeth_evening": {
        "text": "–î–∞–Ω—è, —Ç—ã –ø–æ—á–∏—Å—Ç–∏–ª –∑—É–±—ã? ü¶∑",
        "time": "22:00",
        "days": "daily",
        "enabled": True
    },
    "hair_wash": {
        "text": "–î–∞–Ω—è, –ø–æ–º–æ–π –≥–æ–ª–æ–≤—É! üöø",
        "time": "20:00",
        "interval_days": 3,
        "enabled": True
    },
    "nails": {
        "text": "–î–∞–Ω—è, –ø–æ—Ä–∞ –ø–æ–¥—Å—Ç—Ä–∏—á—å –Ω–æ–≥—Ç–∏! ‚úÇÔ∏è",
        "time": "20:00",
        "interval_days": 7,
        "enabled": True
    }
}

def load_reminders():
    """–ó–∞–≥—Ä—É–∑–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –∏–∑ —Ñ–∞–π–ª–∞"""
    try:
        with open('reminders.json', 'r', encoding='utf-8') as f:
            return json.load(f)
    except FileNotFoundError:
        save_reminders(DEFAULT_REMINDERS)
        return DEFAULT_REMINDERS

def save_reminders(reminders):
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –≤ —Ñ–∞–π–ª"""
    with open('reminders.json', 'w', encoding='utf-8') as f:
        json.dump(reminders, f, ensure_ascii=False, indent=2)

async def send_reminder(context: ContextTypes.DEFAULT_TYPE):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è"""
    job = context.job
    reminder_id = job.data.get('id')
    reminders = load_reminders()
    
    if reminder_id in reminders and reminders[reminder_id]['enabled']:
        await context.bot.send_message(
            chat_id=job.chat_id,
            text=reminders[reminder_id]['text']
        )

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    keyboard = [
        ['–ü–æ–∫–∞–∑–∞—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è'],
        ['–î–æ–±–∞–≤–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ'],
        ['–£–¥–∞–ª–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ'],
        ['–í–∫–ª—é—á–∏—Ç—å/–≤—ã–∫–ª—é—á–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ']
    ]
    reply_markup = ReplyKeyboardMarkup(keyboard, one_time_keyboard=True)
    await update.message.reply_text(
        '–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç-–Ω–∞–ø–æ–º–∏–Ω–∞–ª–∫–∞. –ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å?',
        reply_markup=reply_markup
    )
    return CHOOSING_ACTION

async def show_reminders(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–Ω—ã–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è"""
    reminders = load_reminders()
    message = "–¢–µ–∫—É—â–∏–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è:\n\n"
    for rid, reminder in reminders.items():
        status = "‚úÖ" if reminder['enabled'] else "‚ùå"
        time_str = reminder['time']
        if 'interval_days' in reminder:
            frequency = f"–ö–∞–∂–¥—ã–µ {reminder['interval_days']} –¥–Ω–µ–π"
        elif reminder['days'] == 'daily':
            frequency = "–ï–∂–µ–¥–Ω–µ–≤–Ω–æ"
        else:
            frequency = "–ü–æ –±—É–¥–Ω—è–º"
        message += f"{status} {reminder['text']}\n   üïí {time_str}, {frequency}\n\n"
    
    await update.message.reply_text(message)
    return CHOOSING_ACTION

async def add_reminder(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è"""
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞—á–∏–Ω–∞–µ–º –ª–∏ –º—ã –Ω–æ–≤–æ–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ
    if not context.user_data.get('adding_reminder'):
        context.user_data['adding_reminder'] = True
        await update.message.reply_text(
            '–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è:',
            reply_markup=ReplyKeyboardRemove()
        )
        return ADDING_REMINDER

    # –ü–æ–ª—É—á–∞–µ–º –≤–≤–µ–¥–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ
    reminder_text = update.message.text
    reminders = load_reminders()
    
    new_reminder_id = f"custom_reminder_{len(reminders) + 1}"
    reminders[new_reminder_id] = {
        "text": reminder_text,
        "time": "12:00",  # –≤—Ä–µ–º—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        "days": "daily",
        "enabled": True
    }
    
    save_reminders(reminders)
    context.user_data['adding_reminder'] = False
    
    await update.message.reply_text(
        f"–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ!\n"
        f"–¢–µ–∫—Å—Ç: {reminder_text}\n"
        f"–í—Ä–µ–º—è: 12:00\n"
        f"–ß–∞—Å—Ç–æ—Ç–∞: –ï–∂–µ–¥–Ω–µ–≤–Ω–æ"
    )
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –¥–ª—è –Ω–æ–≤–æ–≥–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
    setup_reminder_job(context.application, new_reminder_id, reminders[new_reminder_id], update.effective_chat.id)
    
    return CHOOSING_ACTION
    
    elif context.user_data['adding_step'] == 'text':
        context.user_data['reminder_text'] = update.message.text
        context.user_data['adding_step'] = 'time'
        await update.message.reply_text('–í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–ß:–ú–ú (–Ω–∞–ø—Ä–∏–º–µ—Ä, 14:30):')
        return ADDING_REMINDER
    
    elif context.user_data['adding_step'] == 'time':
        try:
            time_str = update.message.text
            hours, minutes = map(int, time_str.split(':'))
            if not (0 <= hours <= 23 and 0 <= minutes <= 59):
                raise ValueError
            
            context.user_data['reminder_time'] = time_str
            keyboard = [['–ï–∂–µ–¥–Ω–µ–≤–Ω–æ'], ['–ü–æ –±—É–¥–Ω—è–º'], ['–ö–∞–∂–¥—ã–µ 3 –¥–Ω—è'], ['–ö–∞–∂–¥—ã–µ 7 –¥–Ω–µ–π']]
            reply_markup = ReplyKeyboardMarkup(keyboard, one_time_keyboard=True)
            context.user_data['adding_step'] = 'frequency'
            await update.message.reply_text('–í—ã–±–µ—Ä–∏—Ç–µ —á–∞—Å—Ç–æ—Ç—É –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è:', reply_markup=reply_markup)
            return ADDING_REMINDER
            
        except ValueError:
            await update.message.reply_text('–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 14:30):')
            return ADDING_REMINDER
    
    elif context.user_data['adding_step'] == 'frequency':
        frequency = update.message.text
        reminders = load_reminders()
        
        new_reminder_id = f"custom_reminder_{len(reminders) + 1}"
        new_reminder = {
            "text": context.user_data['reminder_text'],
            "time": context.user_data['reminder_time'],
            "enabled": True
        }
        
        if frequency == '–ï–∂–µ–¥–Ω–µ–≤–Ω–æ':
            new_reminder['days'] = 'daily'
        elif frequency == '–ü–æ –±—É–¥–Ω—è–º':
            new_reminder['days'] = 'weekdays'
        elif frequency.startswith('–ö–∞–∂–¥—ã–µ'):
            days = int(frequency.split()[1])
            new_reminder['interval_days'] = days
        
        reminders[new_reminder_id] = new_reminder
        save_reminders(reminders)
        
        # –û—á–∏—Å—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö
        context.user_data.clear()
        
        await update.message.reply_text(
            f"–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ!\n"
            f"–¢–µ–∫—Å—Ç: {new_reminder['text']}\n"
            f"–í—Ä–µ–º—è: {new_reminder['time']}\n"
            f"–ß–∞—Å—Ç–æ—Ç–∞: {frequency}"
        )
        
        # –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ –¥–ª—è –Ω–æ–≤–æ–≥–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
        setup_reminder_job(context.application, new_reminder_id, new_reminder, update.effective_chat.id)
        
        return await start(update, context)

async def remove_reminder(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–£–¥–∞–ª–µ–Ω–∏–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è"""
    if 'removing' not in context.user_data:
        reminders = load_reminders()
        keyboard = [[f"–£–¥–∞–ª–∏—Ç—å: {reminder['text'][:30]}..."] for reminder in reminders.values()]
        keyboard.append(['–û—Ç–º–µ–Ω–∞'])
        reply_markup = ReplyKeyboardMarkup(keyboard, one_time_keyboard=True)
        context.user_data['removing'] = True
        await update.message.reply_text('–í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:', reply_markup=reply_markup)
        return REMOVING_REMINDER
    
    text = update.message.text
    if text == '–û—Ç–º–µ–Ω–∞':
        context.user_data.clear()
        return await start(update, context)
    
    text = text.replace("–£–¥–∞–ª–∏—Ç—å: ", "").replace("...", "")
    reminders = load_reminders()
    for rid, reminder in reminders.items():
        if reminder['text'].startswith(text):
            del reminders[rid]
            save_reminders(reminders)
            context.user_data.clear()
            await update.message.reply_text("–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —É–¥–∞–ª–µ–Ω–æ!")
            return await start(update, context)
    
    await update.message.reply_text("–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
    context.user_data.clear()
    return await start(update, context)

async def toggle_reminder(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–í–∫–ª—é—á–µ–Ω–∏–µ/–≤—ã–∫–ª—é—á–µ–Ω–∏–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π"""
    reminders = load_reminders()
    keyboard = [[f"–ü–µ—Ä–µ–∫–ª—é—á–∏—Ç—å: {reminder['text'][:30]}..."] for reminder in reminders.values()]
    keyboard.append(['–û—Ç–º–µ–Ω–∞'])
    reply_markup = ReplyKeyboardMarkup(keyboard, one_time_keyboard=True)
    await update.message.reply_text(
        '–í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –¥–ª—è –≤–∫–ª—é—á–µ–Ω–∏—è/–≤—ã–∫–ª—é—á–µ–Ω–∏—è:',
        reply_markup=reply_markup
    )
    return CHOOSING_ACTION

async def handle_reminder_toggle(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–∫–ª—é—á–µ–Ω–∏—è/–≤—ã–∫–ª—é—á–µ–Ω–∏—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è"""
    text = update.message.text.replace("–ü–µ—Ä–µ–∫–ª—é—á–∏—Ç—å: ", "").replace("...", "")
    reminders = load_reminders()
    for rid, reminder in reminders.items():
        if reminder['text'].startswith(text):
            reminder['enabled'] = not reminder['enabled']
            status = "–≤–∫–ª—é—á–µ–Ω–æ" if reminder['enabled'] else "–≤—ã–∫–ª—é—á–µ–Ω–æ"
            save_reminders(reminders)
            await update.message.reply_text(f"–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ {status}!")
            return await start(update, context)
    
    await update.message.reply_text("–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
    return await start(update, context)

def setup_reminder_job(application, reminder_id, reminder, chat_id):
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ—Ç–¥–µ–ª—å–Ω–æ–≥–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è"""
    hour, minute = map(int, reminder['time'].split(':'))
    dubai_tz = pytz.timezone('Asia/Dubai')
    reminder_time = time(hour=hour, minute=minute, tzinfo=dubai_tz)
    
    job_queue = application.job_queue
    
    if 'interval_days' in reminder:
        job_queue.run_repeating(
            send_reminder,
            interval=reminder['interval_days'] * 86400,
            first=reminder_time,
            data={'id': reminder_id},
            chat_id=chat_id
        )
    elif reminder['days'] == 'daily':
        job_queue.run_daily(
            send_reminder,
            time=reminder_time,
            data={'id': reminder_id},
            chat_id=chat_id
        )
    else:  # weekdays
        job_queue.run_daily(
            send_reminder,
            time=reminder_time,
            days=(0, 1, 2, 3, 4),
            data={'id': reminder_id},
            chat_id=chat_id
        )

def setup_jobs(application, chat_id):
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≤—Å–µ—Ö –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π"""
    reminders = load_reminders()
    for reminder_id, reminder in reminders.items():
        if reminder['enabled']:
            setup_reminder_job(application, reminder_id, reminder, chat_id)

def main():
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
    token = "7636715892:AAEkj394bXuxJIrumZsj19zuXyZ7ntU-SHc"
    
    if not token:
        raise RuntimeError("BOT_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!")

    application = Application.builder().token(token).build()
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —á–∞—Å–æ–≤–æ–≥–æ –ø–æ—è—Å–∞
    job_queue = application.job_queue
    job_queue.scheduler.timezone = pytz.timezone('Asia/Dubai')
    
    chat_id = os.environ.get("CHAT_ID", "YOUR_CHAT_ID_HERE")

    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥
    conv_handler = ConversationHandler(
        entry_points=[
            CommandHandler('start', start),
            CommandHandler('show', show_reminders),
            CommandHandler('add', add_reminder),
            CommandHandler('remove', remove_reminder),
            CommandHandler('toggle', toggle_reminder)
        ],
        states={
            CHOOSING_ACTION: [
                MessageHandler(filters.Regex('^–ü–æ–∫–∞–∑–∞—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è$'), show_reminders),
                MessageHandler(filters.Regex('^–î–æ–±–∞–≤–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ$'), add_reminder),
                MessageHandler(filters.Regex('^–£–¥–∞–ª–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ$'), remove_reminder),
                MessageHandler(filters.Regex('^–í–∫–ª—é—á–∏—Ç—å/–≤—ã–∫–ª—é—á–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ$'), toggle_reminder),
                MessageHandler(filters.Regex('^–ü–µ—Ä–µ–∫–ª—é—á–∏—Ç—å: '), handle_reminder_toggle),
            ],
            ADDING_REMINDER: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, add_reminder)
            ],
            REMOVING_REMINDER: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, remove_reminder)
            ],
        },
        fallbacks=[MessageHandler(filters.Regex('^–û—Ç–º–µ–Ω–∞$'), start)]
    )

    application.add_handler(conv_handler)
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π
    setup_jobs(application, chat_id)

    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
    application.run_polling()

if __name__ == "__main__":
    main()